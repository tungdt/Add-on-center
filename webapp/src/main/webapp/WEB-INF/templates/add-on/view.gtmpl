<%
	import org.apache.commons.lang.StringUtils;
	import org.exoplatform.portal.application.PortalRequestContext;
	import org.exoplatform.portal.webui.util.Util;
	import org.exoplatform.resolver.ResourceResolver;
	import org.exoplatform.services.cms.taxonomy.TaxonomyService;
	import org.exoplatform.services.jcr.RepositoryService;
	import org.exoplatform.services.jcr.core.ManageableRepository;
	import org.exoplatform.services.wcm.core.WebSchemaConfigService;
	import org.exoplatform.wcm.connector.collaboration.RESTImagesRendererService;
	import org.exoplatform.services.wcm.webcontent.WebContentSchemaHandler;
	import org.exoplatform.services.wcm.utils.WCMCoreUtils;
	import org.exoplatform.web.application.ApplicationMessage;
	import org.exoplatform.webui.application.WebuiRequestContext;
	import org.exoplatform.webui.application.portlet.PortletRequestContext;
	import org.exoplatform.webui.config.annotation.ComponentConfig;
	import org.exoplatform.webui.config.annotation.ComponentConfigs;
	import org.exoplatform.webui.config.annotation.EventConfig;
	import org.exoplatform.webui.core.UIPageIterator;
	import org.exoplatform.webui.core.lifecycle.UIFormLifecycle;
	import org.exoplatform.webui.event.Event;
	import org.exoplatform.webui.event.EventListener;
	import org.exoplatform.webui.form.UIForm;
	
	import javax.jcr.Node;
	import javax.jcr.NodeIterator;
	import javax.jcr.Session;
	import javax.jcr.PathNotFoundException;
	import javax.portlet.PortletPreferences;
	import javax.portlet.PortletRequest;
	
	import org.exoplatform.services.cms.i18n.MultiLanguageService;
	
	import java.util.ArrayList;
	import java.util.Locale;
	
	import org.exoplatform.services.wcm.core.WCMConfigurationService;
	import org.exoplatform.services.cms.relations.RelationsService;
	
	import java.io.UnsupportedEncodingException;
	import java.net.URLDecoder;
	import java.util.List;
	import org.exoplatform.services.jcr.ext.common.SessionProvider;
	import org.exoplatform.services.security.ConversationState;
	import org.exoplatform.services.cms.folksonomy.NewFolksonomyService;
	import org.exoplatform.services.wcm.core.NodeLocation;
	import org.exoplatform.services.wcm.skin.XSkinService;
	import org.exoplatform.services.wcm.javascript.XJavascriptService;
	import java.text.DateFormat;
	import java.text.ParseException;
	import java.util.Date;
	import java.text.*;
	
	public String getImageCover(Node currentNode) {
	
	String path ="/add-on-center-webapp/skin/css/images/addons-icon.jpg";
	Node mediaNode = currentNode.getNode("medias/images");
	NodeIterator iterator = mediaNode.getNodes();
	
	if (iterator.getSize() > 0) {
	 Node firstNode= iterator.nextNode();
	 path = "/rest/jcr/repository/collaboration" + firstNode.getPath();
	}
	
	  return path;
   	
	}
	
	public List getImages(Node currentNode) {
	
	List<String> images = new ArrayList<String>();
	Node mediaNode = currentNode.getNode("medias/images"); 	
	NodeIterator nodeIterator = mediaNode.getNodes();
	while (nodeIterator.hasNext()) {
	Node img = nodeIterator.nextNode();
	images.add(img.getPath());
	}
	  return images;
	}
	
	
	public String generateLink(Node node) throws Exception {
	
	String categoryPath = null;
	PortalRequestContext portalRequestContext = Util.getPortalRequestContext();
	PortletRequestContext portletRequestContext = (PortletRequestContext) WebuiRequestContext.getCurrentInstance();
	PortletRequest portletRequest = portletRequestContext.getRequest();
	PortletPreferences portletPreferences = portletRequest.getPreferences();
	String preferenceRepository = "repository";
	String preferenceTreeName = "website";
	String preferenceTargetPage = "resource-viewer";
	String workspace = "collaboration";
	String repository = "repository";
	String pageNodeSelected = Util.getUIPortal().getSelectedNode().getUri();
	try {
	categoryPath = URLDecoder.decode(StringUtils.substringAfter(portalRequestContext.getNodePath(),pageNodeSelected +"/"), "UTF-8");
	} catch (UnsupportedEncodingException e) {
	
	}
	
	String gpath = Util.getPortalRequestContext().getRequestParameter("path");
	if (gpath!=null) {
	categoryPath = gpath.substring(gpath.indexOf(preferenceTreeName)+preferenceTreeName.length()+1);
	}
	RepositoryService repositoryService = uicomponent.getApplicationComponent(RepositoryService.class);
	ManageableRepository manageableRepository = repositoryService.getRepository(repository);
	TaxonomyService taxonomyService = uicomponent.getApplicationComponent(TaxonomyService.class);
	Node treeNode = null;
	treeNode = taxonomyService.getTaxonomyTree(preferenceRepository,preferenceTreeName);
	Node categoryNode = null;
	
	if (preferenceTreeName.equals(categoryPath) || "".equals(categoryPath)) {
	categoryNode = treeNode;
	} else {
	if (!categoryPath.startsWith("Content-types")) {
	
	String[] arr_temp = categoryPath.split("/");
	categoryPath = arr_temp[arr_temp.length -1] ;
	} 
	
	categoryNode = treeNode.getNode(categoryPath);
	}
	
	if (!categoryNode.isNodeType("exo:taxonomy")) {
	
	if (categoryPath!=null && categoryPath.lastIndexOf("/")>-1) {
	categoryPath = categoryPath.substring(0, categoryPath.lastIndexOf("/"));
	categoryNode = treeNode.getNode(categoryPath);
	} else {
	categoryPath = "";
	categoryNode = treeNode;
	}
	}
	String nodeName = null;
	if(node.getName().equals("jcr:frozenNode")) {
	
	String uuid = node.getProperty("jcr:frozenUuid").getString();
	Session session = WCMCoreUtils.getUserSessionProvider().getSessionProvider().getSession(workspace,manageableRepository);
	Node realNode = session.getNodeByUUID(uuid);
	
	if(realNode != null){
	nodeName = realNode.getName();
	}
	} else {
    
	nodeName = node.getName();
	
	}
	
	Node newNode = null;
	
	try {
	newNode= categoryNode.getNode(nodeName);
	} catch(PathNotFoundException e1) {
	try {
	if (categoryPath != null && categoryPath.lastIndexOf("/")>-1) {
	categoryPath = categoryPath.substring(0, categoryPath.lastIndexOf("/"));
	categoryNode = treeNode.getNode(categoryPath);
	} else {
	categoryPath = "";
	categoryNode = treeNode;
	}
	newNode = categoryNode.getNode(nodeName);
	} catch(PathNotFoundException e2) {
	try {
	if (categoryPath != null && categoryPath.lastIndexOf("/")>-1) {
	categoryPath = categoryPath.substring(0, categoryPath.lastIndexOf("/"));
	categoryNode = treeNode.getNode(categoryPath);
	} else {
	categoryPath = "";
	categoryNode = treeNode;
	}
	newNode = categoryNode.getNode(nodeName);
	} catch(PathNotFoundException e3) {
	try {
	if (categoryPath != null && categoryPath.lastIndexOf("/")>-1) {
	categoryPath = categoryPath.substring(0, categoryPath.lastIndexOf("/"));
	categoryNode = treeNode.getNode(categoryPath);
	} else {
	categoryPath = "";
	categoryNode = treeNode;
	}
	newNode = categoryNode.getNode(nodeName);
	} catch(PathNotFoundException e4) { }
	}
	}
	}
	String path = newNode.getPath();
	String link = null;
	String itemPath = path.substring(path.lastIndexOf(preferenceTreeName));
	String backToCategory = "";
	if (categoryPath.equals("")) {
	backToCategory = pageNodeSelected;
	} else {
	backToCategory = itemPath.substring(0,
	itemPath.indexOf(newNode.getName()) - 1);
	}
	String portalURI = portalRequestContext.getPortalURI();
	link = portalURI + preferenceTargetPage + "?path=/" + itemPath;
	return link;
	}
	
	public String getTitle(Node node) throws Exception {
	return node.hasProperty("exo:title") ?
	node.getProperty("exo:title").getValue().getString() : node.getName();
	}
	
	public List<Node> getRelatedContents(Node node) throws Exception {
	
	SessionProvider sessionProvider = null;
	if (sessionProvider == null && ConversationState.getCurrent() != null)
	sessionProvider = (SessionProvider) ConversationState.getCurrent().getAttribute(SessionProvider.SESSION_PROVIDER);
	
	try {
	RelationsService relationService = uicomponent.getApplicationComponent(RelationsService.class);
	List<Node> relationNodes = relationService.getRelations(node ,  sessionProvider);
	return relationNodes;
	} catch (Exception e) {
	e.printStackTrace();
	return new ArrayList<Node>();
	} finally {
	//sessionProvider.close();
	}
	}
	
	public String preProcesor(Node currentNode) {
	String input = currentNode.getNode("default.html/jcr:content").getProperty("jcr:data").getString();
	try {
	if (currentNode.getProperty("exo:resourceType").getString().equals("tutorial"))
	{
	StringBuffer sb = new StringBuffer();
	String[] arr = input.split("</pre>");
	for (int i = 0 ; i < arr.length ; i++) {
	sb.append(encode(arr[i]));
	}
	return sb.toString();
	} else {
	return input;
	}
	} catch(Exception e) {
	return input;
	}
	}
	
	public String encode(String input) {
	int startPre =input.indexOf("<pre");
	if (startPre > 0) {
	String checkClass = input.substring(startPre);
	if(checkClass.contains("class=\"prettyprint\"") || checkClass.contains("class='prettyprint'")) {
	int endPreOpen =input.indexOf(">", startPre);
	if(endPreOpen > 0) {
	String text = input.substring(endPreOpen + 1);
	String replaceText = text.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
	return input.replace(text, replaceText) + "</pre>";
	}
	} else {
	return input + "</pre>";
	}
	}
	return input;
	}
	
	def currentNode = uicomponent.getOriginalNode() ;
	def title = getTitle(currentNode);
	def realNode = org.exoplatform.ecm.webui.utils.Utils.getNodeSymLink(currentNode);
	def rels = getRelatedContents(realNode);
	PortalRequestContext requestContext = Util.getPortalRequestContext();
	String linkBack = requestContext.getPortalURI() + "resource-center";
	
	public boolean getPortletPreference(String name) {
	String value =
	_ctx.getRequestContext().getRequest().getPreferences().getValue(name,null);
	
	if(value != null) return Boolean.parseBoolean(value);
	return false;
	
	}
	
	String uriLink = requestContext.getRequestParameter("path");
	
	String basePath = "";
	String link = "";
	try {
	basePath = generateLink(currentNode);
	if (basePath != null && !basePath.equals("")) {
	if (basePath.indexOf("/website/") > 0) {
	uriLink = basePath.substring(basePath.indexOf("path=/website/") +
	14, basePath.length());
	basePath = basePath.substring(0, basePath.indexOf("path=/website/") + 14);
	}
	}
	if (uriLink != null && !uriLink.equals("")) {
	String[] arrLink = uriLink.split("/");
	String path = basePath;
	if(arrLink.length > 0) {
	for (int i=0; i < arrLink.length; i++) {
	if (i > 0)  path += "/";
	path += arrLink[i];
	if (i < (arrLink.length -1)) path = path.replaceAll("resource-viewer", "resource-center");
	else path = "#";
	if (i < (arrLink.length -1)) {
	link += "<a href='" + path + "'>" + arrLink[i].replaceAll("-"," ") + "</a>";
	link += " / ";
	} else  link += "<a href='" + path + "'>" + getTitle(currentNode) + "</a>";
	}
	}
	}
	} catch(Exception e) {
	
	}
	
%>

<!--Addon navigation-->
<div class="addonSearchToolbar">
  <div class="uiGrayLightBox">
    <div class="clearfix">
      <button class="btn btn-primary pull-left" onclick="location.href='/portal/intranet/add-ons'" type="button">Back to Add-ons</button>
      <button class="btn btn-primary pull-right" onclick="location.href='/portal/login?initialURI=/portal/intranet/create-addon'" type="button">Add New Add-on</button>
    </div>
  </div>
</div>
<!--END Addon navigation-->


<%
	def html = preProcesor(currentNode);
	def img = getImageCover(currentNode);
	def pluginTitle = getTitle(currentNode);
	
	def description = currentNode.getProperty("exo:description").getString();
	def version;
  if ( currentNode.hasProperty("exo:version")) version= currentNode.getProperty("exo:version").getString();

	def summary;
  if ( currentNode.hasProperty("exo:summary")) summary= currentNode.getProperty("exo:summary").getString();
	

	def author;
	if ( currentNode.hasProperty("exo:author"))  author = currentNode.getProperty("exo:author").getString();
	
	def license;
	if ( currentNode.hasProperty("exo:license"))  license = currentNode.getProperty("exo:license").getString();
	
	def compatibility;
	if ( currentNode.hasProperty("exo:compatibility")) compatibility = currentNode.getProperty("exo:compatibility").getString();
	
	def sourceUrl;
	if ( currentNode.hasProperty("exo:sourceUrl")) sourceUrl = currentNode.getProperty("exo:sourceUrl").getString();
	
	def documentUrl;
	if ( currentNode.hasProperty("exo:documentUrl"))  documentUrl = currentNode.getProperty("exo:documentUrl").getString();
	
	def downloadUrl = currentNode.getProperty("exo:downloadUrl").getString();
	
	def css = currentNode.getNode("css/default.css/jcr:content").getProperty("jcr:data").getString();
	def js = currentNode.getNode("js/default.js/jcr:content").getProperty("jcr:data").getString();
	String gal_img = "";
	boolean isShowCategories = getPortletPreference("ShowCategories");
	boolean isShowTags = getPortletPreference("ShowTags");
	List<String> gal_images = getImages(currentNode);
	
	if((css != null) && (css.length() > 0)) {
%>
<style type="text/css">
	/* <![CDATA[ */
		<%=css%>
	/* ]]> */
</style>
<%
	}
	
	if((js != null) && (js.length() > 0)) {
%>
<script type="text/javascript">
	/* <![CDATA[ */
	<%=js%>
	/* ]]> */
</script>

<%
	}
	
	//if (isShowCategories || isShowTags) {
	if (false) {
%>


<div class="WebContentContainer">
	<div class="WebContentInformation">
		<%
			if(isShowCategories) {
			TaxonomyService taxonomyService = uicomponent.getApplicationComponent(TaxonomyService.class);
			List<Node> categoryNodeList = taxonomyService.getAllCategories(currentNode);
			if (!categoryNodeList.isEmpty()) {
			StringBuffer categories = new StringBuffer();
			for (Node category: categoryNodeList) {
			categories.append(category.getName()).append(", ");
			}
			categories.replace(categories.lastIndexOf(", "),categories.size(), "");
		%>
		<span
		class="Categories"><strong><%=_ctx.appRes("Category.view.label")%>:</strong>
		<%= categories.toString() %></span>
		<%
			}
			}
			if(isShowTags) {
			NewFolksonomyService folkService =
			uicomponent.getApplicationComponent(NewFolksonomyService.class);
			def nodeLocation = NodeLocation.make(currentNode);
			List<Node> tagList =
			folkService.getLinkedTagsOfDocument(currentNode,
			nodeLocation.getRepository(), nodeLocation.getWorkspace());
			if(!tagList.isEmpty()) {
			StringBuffer tagBuff = new StringBuffer("[");
			for(Node tag: tagList) {
			tagBuff.append(tag.getName()).append(", ");
			}
			tagBuff.replace(tagBuff.lastIndexOf(", "), tagBuff.size(), "]");
		%>
		<span class="Tags"><strong><%=_ctx.appRes("Tag.view.label")%>:</strong>
		<%= tagBuff.toString() %></span>
		<%
			}
			}
		%>
	</div>
	<div class="UIPluginTemplateOneScr">
		<div class="ContentPlugin ClearFix">
			<img width="300px" style="border: thin solid;" thin="" alt="<%=pluginTitle%>" src="<%=img%>" class="PluginFL">
			<p><%=description%></p>
		</div>
		<div class="detail_info">
			<span> Author: </span><%=author%> <br/>
			<% if (license != null) { %>
			<span> License: </span><%=license%><br/> 
			<% } %>
			<%   if (version != null)  { %>
			<span> Version: </span><%=version%><br/>
			<% } %>
			<% if (compatibility != null) {  %>
			<span> Compatibility: </span><%=compatibility%> <br/>
			<% } %>
			<% if (sourceUrl != null) { %>
			<span> Source Code Url: </span><%=sourceUrl%> <br/>
			<% } %>
			<% if (documentUrl != null) {  %>
			<span> Documentation: </span><%=documentUrl%> <br/>
			<% } %>
			<div>
				<ul class="ReleaseList">
					<li class="Title">
						<h4>Release</h4>
					</li>
					<li><a href="<%=downloadUrl%>" class="DownloadLink"><%=_ctx.appRes("UIPortlet.Download")%></a></li>
				</ul>
			</div>
			<% 
				for (int i=0;i<gal_images.size();i++) {
				gal_img = (String) imgs.get(i);
			%>
			<img  src="/rest/jcr/repository/collaboration<%=gal_img%>" >
			<% } %>
			<div>
			</div>
		</div>
		<%
			
			} else {
			
		%>
		<div class="UIPluginTemplateOneScr uiBox">
			<div class="uiContentBox">
				<div class="media">
					<div class="pull-left boxViewImageAddon">
						<div class="ContentPlugin imageMain">
							<img  alt="<%=pluginTitle%>" src="<%=img%>">
						</div>
						<div class="AddOnGallery ClearFix">
							<% 
								int j=0;
								if(gal_images.size() > 1)
									j=1;

								for (int i=j;i<gal_images.size();i++) {
								gal_img = (String) gal_images.get(i);     	
							%>
							<div class="AddOnImg">
								<a class="thumb image"  data-fancybox-group="gallery"  href="/rest/jcr/repository/collaboration<%=gal_img%>">
								<img class="ImgLarge" src="/rest/jcr/repository/collaboration<%=gal_img%>">
								<i class="uiIconSearch uiIconWhite"></i>
								</a>
							</div>
							<% } %>
						</div>
					</div>
					
					<div class="media-body">
						<div class="detailInfoAddon">
							<h4>$title</h4>
							<p>
								<%=description%>

							</p>
							<p class="Title">
								<h4 style="margin: 0;">Release</h4>
							</p>
							<p> <span> Author: </span><%=author%> </p>
							<% if (license != null) { %>
							<p> <span> License: </span><%=license%></p>
							<% } %>
							<%   if (version != null)  { %>
							<p> <span> Version: </span><%=version%> </p>
							<% } %> 
							<% if (compatibility != null) {  %>
							<p> <span> Compatibility: </span><%=compatibility%></p>
							<% } %> 
							<% if (sourceUrl != null) { %>
							<p><a href="<%=sourceUrl%>" class="DownloadLink" target="_blank">Source Code</a> </p>
							<% } %>
							<% if (documentUrl != null) { %>
							<p><span>Documentation: </span> <a href="<%=documentUrl%>" target="_blank"><%=documentUrl%></a></p>
							<% } %>
							<a class="btn btn-primary" href="<%=downloadUrl%>" class="DownloadLink" target="_blank"> Download </a>
							
						</div>
					</div>
					
				</div>
				<!---->	
			</div>
		</div>
		
		
		<%
			}
		%>
		
		<script type="text/javascript" src="/eXoResources/javascript/jquery-1.7.1.js"></script>
		<link href="/add-on-center-webapp/skin/css/jquery.fancybox-1.3.4.css" rel="stylesheet">
		<script src="/add-on-center-webapp/javascript/exo/add-on/jquery.fancybox-1.3.4.pack.js">
		</script>
		<link href="/add-on-center-webapp/skin/css/add-ons.css" rel="stylesheet">
		
		
		<script type="text/javascript">
			jQuery(document).ready(function(){
				
				jQuery(".thumb").fancybox({

	openEffect  : 'elastic', // 'elastic', 'fade' or 'none'
		openSpeed   : 250,
		openEasing  : 'swing',
		openOpacity : true,
		openMethod  : 'zoomIn',

		// Closing fancyBox
		closeEffect  : 'elastic', // 'elastic', 'fade' or 'none'
		closeSpeed   : 250,
		closeEasing  : 'swing',
		closeOpacity : true,
		closeMethod  : 'zoomOut',

		// Changing next gallery item
		nextEffect : 'fade', // 'elastic', 'fade' or 'none'
		nextSpeed  : 250,
		nextEasing : 'swing',
		nextMethod : 'changeIn',

		// Changing previous gallery item
		prevEffect : 'fade', // 'elastic', 'fade' or 'none'
		prevSpeed  : 250,
		prevEasing : 'swing',
		prevMethod : 'changeOut',


				});

			});
		</script>
		

